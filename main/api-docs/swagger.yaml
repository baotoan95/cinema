swagger: "2.0"
info:
  description: "Ciname API Documentation"
  version: "1.0.0"
  title: "Swagger Cinama"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/"
tags:
- name: "users"
  description: "For user management"
- name: "pages"
  description: "For page management"
- name: "movies"
  description: "For movie management"
- name: "cinemas"
  description: "For cinema management"
- name: "cinemaBranches"
  description: "For cinema branch management"
- name: "rooms"
  description: "For room management"
- name: "showTime"
  description: "For showtime management"
schemes:
- "http"
- "https"
paths:
  /users:
    post:
      tags:
      - "users"
      summary: "Add a new user to the system"
      description: ""
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be added to the system"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Bad request"
      security:
      - cinema_auth:
        - "write:pets"
        - "read:pets"
    put:
      tags:
      - "users"
      summary: "Update an existing user"
      description: ""
      operationId: "updateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be update to the system"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
        405:
          description: "Validation exception"
  /users/{id}:
    get:
      tags:
      - "users"
      summary: "Get user by ID"
      description: ""
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "users"
      summary: "Delete user by ID"
      description: ""
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
          
  /pages:
    post:
      tags:
      - "pages"
      summary: "Add a new page to the system"
      description: ""
      operationId: "addPage"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Page object that needs to be added to the system"
        required: true
        schema:
          $ref: "#/definitions/Page"
      responses:
        400:
          description: "Bad request"
      security:
      - cinema_auth:
        - "write:pets"
        - "read:pets"
    put:
      tags:
      - "pages"
      summary: "Update an existing page"
      description: ""
      operationId: "updatePage"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Page object that needs to be update to the system"
        required: true
        schema:
          $ref: "#/definitions/Page"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
        405:
          description: "Validation exception"
  /pages/{id}:
    get:
      tags:
      - "pages"
      summary: "Get page by ID"
      description: ""
      operationId: "getPageById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id that needs to be fetched. Use page1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Page"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Page not found"
    delete:
      tags:
      - "pages"
      summary: "Delete page by ID"
      description: ""
      operationId: "deletePage"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"

  /movies:
    post:
      tags:
      - "movies"
      summary: "Add a new movie to the system"
      description: ""
      operationId: "addMovie"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Movie object that needs to be added to the system"
        required: true
        schema:
          $ref: "#/definitions/Movie"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Movie"
        400:
          description: "Bad request"
      security:
      - cinema_auth:
        - "write:pets"
        - "read:pets"
    put:
      tags:
      - "movies"
      summary: "Update an existing movie"
      description: ""
      operationId: "updateMovie"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Movie object that needs to be update to the system"
        required: true
        schema:
          $ref: "#/definitions/Movie"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Movie not found"
        405:
          description: "Validation exception"
  /movies/{id}:
    get:
      tags:
      - "movies"
      summary: "Get movie by ID"
      description: ""
      operationId: "getMovieById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID that needs to be fetched. Use movie1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Movie"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Movie not found"
    delete:
      tags:
      - "movies"
      summary: "Delete movie by ID"
      description: ""
      operationId: "deleteMovie"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Movie not found"

  /cinemas:
    post:
      tags:
      - "cinemas"
      summary: "Add a new cinema to the system"
      description: ""
      operationId: "addCinema"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Cinema object that needs to be added to the system"
        required: true
        schema:
          $ref: "#/definitions/Cinema"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Cinema"
        400:
          description: "Bad request"
      security:
      - cinema_auth:
        - "write:pets"
        - "read:pets"
    put:
      tags:
      - "cinemas"
      summary: "Update an existing cinema"
      description: ""
      operationId: "updateCinema"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Cinema object that needs to be update to the system"
        required: true
        schema:
          $ref: "#/definitions/Cinema"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Cinema not found"
        405:
          description: "Validation exception"
  /cinemas/{id}:
    get:
      tags:
      - "cinemas"
      summary: "Get cinema by ID"
      description: ""
      operationId: "getCinemaById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID that needs to be fetched. Use movie1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Cinema"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Cinema not found"
    delete:
      tags:
      - "cinemas"
      summary: "Delete cinema by ID"
      description: ""
      operationId: "deleteCinema"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Cinema not found"

  /cinemaBranches:
    post:
      tags:
      - "cinemaBranches"
      summary: "Add a new cinema branch to the system"
      description: ""
      operationId: "addCinemaBranch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Cinema branch object that needs to be added to the system"
        required: true
        schema:
          $ref: "#/definitions/CinemaBranch"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/CinemaBranch"
        400:
          description: "Bad request"
      security:
      - cinema_auth:
        - "write:pets"
        - "read:pets"
    put:
      tags:
      - "cinemaBranches"
      summary: "Update an existing cinema branch"
      description: ""
      operationId: "updateCinemaBranch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Cinema branch object that needs to be update to the system"
        required: true
        schema:
          $ref: "#/definitions/CinemaBranch"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Cinema branch not found"
        405:
          description: "Validation exception"
  /cinemaBranches/{id}:
    get:
      tags:
      - "cinemaBranches"
      summary: "Get cinema by ID"
      description: ""
      operationId: "getCinemaBranchById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID that needs to be fetched. Use branch1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/CinemaBranch"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Cinema branch not found"
    delete:
      tags:
      - "cinemaBranches"
      summary: "Delete cinema branch by ID"
      description: ""
      operationId: "deleteCinemaBranch"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Cinema branch not found"

  /rooms:
    post:
      tags:
      - "rooms"
      summary: "Add a new room to the system"
      description: ""
      operationId: "addRoom"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Room object that needs to be added to the system"
        required: true
        schema:
          $ref: "#/definitions/Room"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Room"
        400:
          description: "Bad request"
      security:
      - cinema_auth:
        - "write:pets"
        - "read:pets"
    put:
      tags:
      - "rooms"
      summary: "Update an existing room"
      description: ""
      operationId: "updateCRoom"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Room object that needs to be update to the system"
        required: true
        schema:
          $ref: "#/definitions/Room"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Room not found"
        405:
          description: "Validation exception"
  /rooms/{id}:
    get:
      tags:
      - "rooms"
      summary: "Get room by ID"
      description: ""
      operationId: "getRoomyId"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID that needs to be fetched. Use room for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Room"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Room not found"
    delete:
      tags:
      - "rooms"
      summary: "Delete room by ID"
      description: ""
      operationId: "deleteRoom"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Room not found"

  /showTime:
    post:
      tags:
      - "showTime"
      summary: "Add a new showtime to the system"
      description: ""
      operationId: "addShowTime"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "ShowTime object that needs to be added to the system"
        required: true
        schema:
          $ref: "#/definitions/ShowTime"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ShowTime"
        400:
          description: "Bad request"
      security:
      - cinema_auth:
        - "write:pets"
        - "read:pets"
    put:
      tags:
      - "showTime"
      summary: "Update an existing ShowTime"
      description: ""
      operationId: "updateCShowTime"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "ShowTime object that needs to be update to the system"
        required: true
        schema:
          $ref: "#/definitions/ShowTime"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "ShowTime not found"
        405:
          description: "Validation exception"
  /showTime/{id}:
    get:
      tags:
      - "showTime"
      summary: "Get showtime by ID"
      description: ""
      operationId: "getShowTimeById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID that needs to be fetched. Use room for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ShowTime"
        400:
          description: "Invalid ID supplied"
        404:
          description: "ShowTime not found"
    delete:
      tags:
      - "showTime"
      summary: "Delete ShowTime by ID"
      description: ""
      operationId: "deleteShowTime"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "ShowTime not found"
securityDefinitions:
  cinema_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "Modify entity in the system"
      read:pets: "View entity in the system"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      password:
        type: "string"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      active:
        type: "boolean"
      role_id:
        type: "integer"
        format: "int64"
  Page:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      content:
        type: "string"
      active:
        type: "boolean"
      order:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
      parent_id:
        type: "integer"
        format: "int64"
  Movie:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      duration:
        type: "integer"
        format: "int64"
      type:
        type: "string"
      published_date:
        type: "integer"
        format: "int64"
      director:
        type: "string"
      category:
        type: "string"
      actors:
        type: "string"
      made_in:
        type: "string"
      introduction:
        type: "string"
      created_by:
        type: "integer"
        format: "int64"
  Cinema:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      icon:
        type: "string"
  CinemaBranch:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      address:
        type: "string"
      image:
        type: "string"
      cinema_id:
        type: "integer"
        format: "int64"
  Room:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      chairs:
        type: "string"
      cinema_branch_id:
        type: "integer"
        format: "int64"
      showTimes:
        type: "array"
        items:
          $ref: "#/definitions/ShowTime"
  ShowTime:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      time:
        type: "integer"
        format: "int64"
      movie_id:
        type: "integer"
        format: "int64"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"